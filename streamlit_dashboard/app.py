"""
·ª®ng d·ª•ng Streamlit ch√≠nh cho Automated Trading System.
File n√†y cung c·∫•p dashboard ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin v√† 
ƒëi·ªÅu khi·ªÉn h·ªá th·ªëng giao d·ªãch t·ª± ƒë·ªông, t√≠ch h·ª£p c√°c th√†nh ph·∫ßn
t·ª´ c√°c module kh√°c.
"""

import os
import sys
import time
import json
import pandas as pd
import streamlit as st
import plotly.graph_objects as go
from datetime import datetime, timedelta
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc v√†o ƒë∆∞·ªùng d·∫´n ƒë·ªÉ c√≥ th·ªÉ import c√°c module
ROOT_DIR = Path(__file__).parent.parent
sys.path.append(str(ROOT_DIR))

# Import c√°c module c·∫ßn thi·∫øt t·ª´ h·ªá th·ªëng
from config.system_config import get_system_config, LOG_DIR
from config.env import get_env, get_env_manager
from logs.logger import get_logger, get_system_logger
from logs.metrics.training_metrics import load_training_metrics
from logs.metrics.trading_metrics import load_trading_metrics, calculate_performance_metrics
from logs.metrics.system_metrics import get_system_stats

# Import c√°c th√†nh ph·∫ßn UI
from streamlit_dashboard.components.sidebar import render_sidebar
from streamlit_dashboard.components.metrics_display import (
    render_main_metrics, 
    render_trading_performance_metrics,
    render_agent_metrics
)
from streamlit_dashboard.charts.performance_charts import (
    plot_equity_curve,
    plot_drawdown_chart,
    plot_return_distribution
)
from streamlit_dashboard.charts.risk_visualization import (
    plot_risk_metrics,
    plot_risk_heatmap
)
from streamlit_dashboard.charts.trade_visualization import (
    plot_trade_history,
    plot_trade_distribution
)

# T·∫°o logger
logger = get_system_logger("dashboard")

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Automated Trading System Dashboard",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_css():
    """T·∫£i CSS t√πy ch·ªânh cho dashboard."""
    st.markdown("""
    <style>
        .main-header {
            font-size: 2rem;
            font-weight: bold;
            color: #0078ff;
            margin-bottom: 1rem;
        }
        .metric-container {
            background-color: #f0f2f6;
            border-radius: 5px;
            padding: 10px;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
        }
        .sub-header {
            font-size: 1.5rem;
            font-weight: bold;
            color: #0066cc;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
        }
        .alert-box {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
        }
        .alert-warning {
            background-color: #fff3cd;
            color: #856404;
        }
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
        }
        .card {
            padding: 15px;
            border-radius: 5px;
            box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 10px;
        }
        .metrics-row {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }
        .metric-value {
            font-size: 1.8rem;
            font-weight: bold;
        }
        .metric-label {
            font-size: 0.9rem;
            color: #666;
        }
        .small-font {
            font-size: 0.8rem;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }
        .status-active {
            background-color: #28a745;
        }
        .status-inactive {
            background-color: #dc3545;
        }
        .status-warning {
            background-color: #ffc107;
        }
        /* ƒê·ªãnh d·∫°ng cho giao di·ªán dark mode */
        @media (prefers-color-scheme: dark) {
            .metric-container {
                background-color: #262730;
            }
            .metric-label {
                color: #ccc;
            }
        }
    </style>
    """, unsafe_allow_html=True)

def load_system_config():
    """T·∫£i c·∫•u h√¨nh h·ªá th·ªëng."""
    system_config = get_system_config()
    return system_config.get_all()

def load_trading_data():
    """T·∫£i d·ªØ li·ªáu giao d·ªãch g·∫ßn ƒë√¢y t·ª´ c√°c file log."""
    try:
        # L·∫•y danh s√°ch file log giao d·ªãch
        trading_log_dir = LOG_DIR / "trading"
        log_files = list(trading_log_dir.glob("trading_*_*.log"))
        
        # S·∫Øp x·∫øp file theo th·ªùi gian (m·ªõi nh·∫•t tr∆∞·ªõc)
        log_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        if not log_files:
            return pd.DataFrame()
        
        # ƒê·ªçc file log m·ªõi nh·∫•t
        latest_log = log_files[0]
        
        # Ph√¢n t√≠ch log ƒë·ªÉ t·∫°o DataFrame
        trades = []
        with open(latest_log, 'r', encoding='utf-8') as f:
            for line in f:
                if "ƒê√£ m·ªü v·ªã th·∫ø" in line or "ƒê√£ ƒë√≥ng v·ªã th·∫ø" in line:
                    try:
                        parts = line.split(" - ")
                        timestamp = parts[0].strip()
                        
                        # Tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch
                        if "ƒê√£ m·ªü v·ªã th·∫ø" in line:
                            # V√≠ d·ª•: ƒê√£ m·ªü v·ªã th·∫ø LONG 0.01 @ 27350.5, ƒë√≤n b·∫©y: 5x
                            trade_info = parts[-1].strip()
                            trade_parts = trade_info.split()
                            
                            direction = trade_parts[3]  # LONG ho·∫∑c SHORT
                            size = float(trade_parts[4])
                            price = float(trade_parts[6].rstrip(','))
                            
                            leverage = 1.0
                            if len(trade_parts) > 8 and "ƒë√≤n b·∫©y:" in trade_info:
                                leverage = float(trade_parts[-1].rstrip('x'))
                            
                            trades.append({
                                'timestamp': timestamp,
                                'action': 'open',
                                'direction': direction,
                                'size': size,
                                'price': price,
                                'leverage': leverage,
                                'pnl': None,
                                'pnl_percent': None
                            })
                        
                        elif "ƒê√£ ƒë√≥ng v·ªã th·∫ø" in line:
                            # V√≠ d·ª•: ƒê√£ ƒë√≥ng v·ªã th·∫ø t·∫°i 27450.5, P&L: 100.0 (0.37%)
                            trade_info = parts[-1].strip()
                            trade_parts = trade_info.split(', ')
                            
                            price_part = trade_parts[0].split()
                            price = float(price_part[-1])
                            
                            pnl_parts = trade_parts[1].split(': ')
                            pnl = float(pnl_parts[1])
                            
                            pnl_percent_part = trade_parts[2].strip('()')
                            pnl_percent = float(pnl_percent_part.rstrip('%'))
                            
                            trades.append({
                                'timestamp': timestamp,
                                'action': 'close',
                                'direction': None,  # Kh√¥ng bi·∫øt h∆∞·ªõng t·ª´ th√¥ng tin ƒë√≥ng
                                'size': None,       # Kh√¥ng bi·∫øt size t·ª´ th√¥ng tin ƒë√≥ng
                                'price': price,
                                'leverage': None,
                                'pnl': pnl,
                                'pnl_percent': pnl_percent
                            })
                    except Exception as e:
                        logger.warning(f"L·ªói khi ph√¢n t√≠ch d√≤ng log: {e}", extra={"component": "dashboard"})
                        continue
        
        # T·∫°o DataFrame t·ª´ danh s√°ch giao d·ªãch
        df = pd.DataFrame(trades)
        if not df.empty:
            df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        return df
    
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu giao d·ªãch: {e}", extra={"component": "dashboard"}, exc_info=True)
        return pd.DataFrame()

def load_agent_metrics():
    """T·∫£i th√¥ng tin v·ªÅ c√°c agent ƒë√£ hu·∫•n luy·ªán."""
    try:
        agent_dir = ROOT_DIR / "saved_models"
        agent_info = []
        
        # Ki·ªÉm tra c√°c th∆∞ m·ª•c agent
        for agent_path in agent_dir.glob("*"):
            if agent_path.is_dir():
                agent_name = agent_path.name
                
                # T√¨m file metrics g·∫ßn ƒë√¢y nh·∫•t
                metrics_files = list(agent_path.glob("metrics_*.json"))
                metrics_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                
                # T√¨m file model g·∫ßn ƒë√¢y nh·∫•t
                model_files = list(agent_path.glob("model_*.pt"))
                model_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                
                if metrics_files:
                    # ƒê·ªçc metrics
                    with open(metrics_files[0], 'r') as f:
                        metrics = json.load(f)
                    
                    # L·∫•y th√¥ng tin c∆° b·∫£n
                    last_update = datetime.fromtimestamp(metrics_files[0].stat().st_mtime)
                    episodes = metrics.get("total_episodes", 0)
                    
                    # T√≠nh c√°c metrics hi·ªáu su·∫•t
                    avg_reward = metrics.get("average_reward", 0)
                    win_rate = metrics.get("win_rate", 0) * 100
                    sharpe = metrics.get("sharpe_ratio", 0)
                    
                    agent_info.append({
                        "name": agent_name,
                        "last_update": last_update,
                        "episodes": episodes,
                        "avg_reward": avg_reward,
                        "win_rate": win_rate,
                        "sharpe": sharpe,
                        "model_path": str(model_files[0]) if model_files else "N/A"
                    })
        
        return pd.DataFrame(agent_info)
    
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i metrics agent: {e}", extra={"component": "dashboard"}, exc_info=True)
        return pd.DataFrame()

def check_system_status():
    """Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng."""
    try:
        # L·∫•y th√¥ng tin h·ªá th·ªëng
        stats = get_system_stats()
        
        # Ki·ªÉm tra c√°c th√†nh ph·∫ßn
        components_status = {
            "API Server": {
                "status": "active" if stats["api_server"]["running"] else "inactive",
                "message": f"Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng" if stats["api_server"]["running"] else "Kh√¥ng ho·∫°t ƒë·ªông",
                "last_check": datetime.now().strftime("%H:%M:%S")
            },
            "Data Collector": {
                "status": "active" if stats["data_collector"]["running"] else "inactive",
                "message": f"ƒêang thu th·∫≠p: {stats['data_collector']['symbols_count']} c·∫∑p" if stats["data_collector"]["running"] else "Kh√¥ng ho·∫°t ƒë·ªông",
                "last_check": datetime.now().strftime("%H:%M:%S")
            },
            "Trading Agent": {
                "status": "active" if stats["trading_agent"]["running"] else "inactive",
                "message": f"ƒêang giao d·ªãch: {stats['trading_agent']['active_pairs']} c·∫∑p" if stats["trading_agent"]["running"] else "Kh√¥ng ho·∫°t ƒë·ªông",
                "last_check": datetime.now().strftime("%H:%M:%S")
            },
            "Risk Manager": {
                "status": "active" if stats["risk_manager"]["running"] else "inactive",
                "message": f"Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng" if stats["risk_manager"]["running"] else "Kh√¥ng ho·∫°t ƒë·ªông",
                "last_check": datetime.now().strftime("%H:%M:%S")
            },
            "Database": {
                "status": "active" if stats["database"]["connected"] else "inactive",
                "message": f"K·∫øt n·ªëi OK" if stats["database"]["connected"] else "M·∫•t k·∫øt n·ªëi",
                "last_check": datetime.now().strftime("%H:%M:%S")
            }
        }
        
        # X√°c ƒë·ªãnh tr·∫°ng th√°i h·ªá th·ªëng t·ªïng th·ªÉ
        if all(c["status"] == "active" for c in components_status.values()):
            overall_status = "active"
            overall_message = "T·∫•t c·∫£ c√°c h·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
        elif any(c["status"] == "inactive" for c in components_status.values()):
            overall_status = "warning"
            inactive_components = [name for name, c in components_status.items() if c["status"] == "inactive"]
            overall_message = f"M·ªôt s·ªë th√†nh ph·∫ßn kh√¥ng ho·∫°t ƒë·ªông: {', '.join(inactive_components)}"
        else:
            overall_status = "inactive"
            overall_message = "H·ªá th·ªëng kh√¥ng ho·∫°t ƒë·ªông"
        
        return {
            "overall": {
                "status": overall_status,
                "message": overall_message,
                "last_check": datetime.now().strftime("%H:%M:%S")
            },
            "components": components_status,
            "resources": {
                "cpu_usage": stats["resources"]["cpu_percent"],
                "memory_usage": stats["resources"]["memory_percent"],
                "disk_usage": stats["resources"]["disk_percent"]
            }
        }
    
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng: {e}", extra={"component": "dashboard"}, exc_info=True)
        return {
            "overall": {
                "status": "unknown",
                "message": f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: {str(e)}",
                "last_check": datetime.now().strftime("%H:%M:%S")
            },
            "components": {},
            "resources": {
                "cpu_usage": 0,
                "memory_usage": 0,
                "disk_usage": 0
            }
        }

def load_recent_logs(n_entries=100):
    """T·∫£i c√°c d√≤ng log g·∫ßn ƒë√¢y."""
    try:
        log_files = list(LOG_DIR.glob("*.log"))
        log_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        if not log_files:
            return []
        
        # ƒê·ªçc file log m·ªõi nh·∫•t
        latest_log = log_files[0]
        
        # ƒê·ªçc n d√≤ng cu·ªëi c√πng
        with open(latest_log, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            return lines[-n_entries:] if len(lines) > n_entries else lines
    
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i log g·∫ßn ƒë√¢y: {e}", extra={"component": "dashboard"}, exc_info=True)
        return []

def render_main_dashboard():
    """Hi·ªÉn th·ªã dashboard ch√≠nh."""
    # Header
    st.markdown('<div class="main-header">üìà Automated Trading System</div>', unsafe_allow_html=True)
    
    # T·∫£i d·ªØ li·ªáu
    system_config = load_system_config()
    trading_data = load_trading_data()
    agent_data = load_agent_metrics()
    system_status = check_system_status()
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng
    status_color = {
        "active": "green",
        "warning": "orange",
        "inactive": "red",
        "unknown": "gray"
    }
    
    st.markdown(
        f"""<div class="alert-box alert-{'success' if system_status['overall']['status'] == 'active' else 'warning' if system_status['overall']['status'] == 'warning' else 'danger'}">
            <span style="color: {status_color[system_status['overall']['status']]}; font-size: 1.2rem;">‚óè</span>
            <strong>Tr·∫°ng th√°i h·ªá th·ªëng:</strong> {system_status['overall']['message']}
            <span style="float: right;" class="small-font">C·∫≠p nh·∫≠t l√∫c: {system_status['overall']['last_check']}</span>
        </div>""",
        unsafe_allow_html=True
    )
    
    # Tabs ch√≠nh
    tabs = st.tabs(["T·ªïng quan", "Giao d·ªãch", "Agent", "H·ªá th·ªëng", "Logs"])
    
    # Tab 1: T·ªïng quan
    with tabs[0]:
        # Hi·ªÉn th·ªã ch·ªâ s·ªë ch√≠nh
        col1, col2, col3, col4 = st.columns(4)
        
        # T√≠nh to√°n c√°c metrics t·ª´ d·ªØ li·ªáu giao d·ªãch
        if not trading_data.empty:
            closed_trades = trading_data[trading_data['action'] == 'close']
            total_trades = len(closed_trades)
            
            if total_trades > 0:
                profitable_trades = len(closed_trades[closed_trades['pnl'] > 0])
                win_rate = (profitable_trades / total_trades) * 100
                avg_pnl = closed_trades['pnl'].mean()
                avg_pnl_percent = closed_trades['pnl_percent'].mean()
            else:
                win_rate = 0
                avg_pnl = 0
                avg_pnl_percent = 0
        else:
            total_trades = 0
            win_rate = 0
            avg_pnl = 0
            avg_pnl_percent = 0
        
        with col1:
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">T·ªïng s·ªë giao d·ªãch</div>
                    <div class="metric-value">{total_trades}</div>
                </div>""",
                unsafe_allow_html=True
            )
        
        with col2:
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">T·ª∑ l·ªá th·∫Øng</div>
                    <div class="metric-value">{win_rate:.2f}%</div>
                </div>""",
                unsafe_allow_html=True
            )
        
        with col3:
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">P&L trung b√¨nh</div>
                    <div class="metric-value">{avg_pnl:.2f}</div>
                </div>""",
                unsafe_allow_html=True
            )
        
        with col4:
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">P&L % trung b√¨nh</div>
                    <div class="metric-value">{avg_pnl_percent:.2f}%</div>
                </div>""",
                unsafe_allow_html=True
            )
        
        # Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t
        st.markdown('<div class="sub-header">Hi·ªáu su·∫•t giao d·ªãch</div>', unsafe_allow_html=True)
        
        if not trading_data.empty:
            # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì P&L t√≠ch l≈©y
            closed_trades = trading_data[trading_data['action'] == 'close'].copy()
            
            if not closed_trades.empty:
                # S·∫Øp x·∫øp theo th·ªùi gian
                closed_trades = closed_trades.sort_values('timestamp')
                
                # T√≠nh P&L t√≠ch l≈©y
                closed_trades['cumulative_pnl'] = closed_trades['pnl'].cumsum()
                
                # V·∫Ω bi·ªÉu ƒë·ªì
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=closed_trades['timestamp'],
                    y=closed_trades['cumulative_pnl'],
                    mode='lines',
                    name='P&L t√≠ch l≈©y',
                    line=dict(color='#0078ff', width=2)
                ))
                
                fig.update_layout(
                    title='P&L t√≠ch l≈©y theo th·ªùi gian',
                    xaxis_title='Th·ªùi gian',
                    yaxis_title='P&L',
                    height=400,
                    margin=dict(l=0, r=0, t=40, b=0)
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi l·ª£i nhu·∫≠n
                col1, col2 = st.columns(2)
                
                with col1:
                    fig_dist = go.Figure()
                    fig_dist.add_trace(go.Histogram(
                        x=closed_trades['pnl_percent'],
                        marker_color='#0078ff',
                        opacity=0.7,
                        name='Ph√¢n ph·ªëi l·ª£i nhu·∫≠n'
                    ))
                    
                    fig_dist.update_layout(
                        title='Ph√¢n ph·ªëi l·ª£i nhu·∫≠n (%)',
                        xaxis_title='L·ª£i nhu·∫≠n (%)',
                        yaxis_title='S·ªë l∆∞·ª£ng giao d·ªãch',
                        height=300,
                        margin=dict(l=0, r=0, t=40, b=0)
                    )
                    
                    st.plotly_chart(fig_dist, use_container_width=True)
                
                with col2:
                    # T√≠nh drawdown
                    cumulative = closed_trades['pnl'].cumsum()
                    running_max = cumulative.cummax()
                    drawdown = (cumulative - running_max) / running_max * 100
                    
                    fig_dd = go.Figure()
                    fig_dd.add_trace(go.Scatter(
                        x=closed_trades['timestamp'],
                        y=drawdown,
                        mode='lines',
                        name='Drawdown',
                        line=dict(color='#ff3b30', width=2),
                        fill='tozeroy'
                    ))
                    
                    fig_dd.update_layout(
                        title='Drawdown (%)',
                        xaxis_title='Th·ªùi gian',
                        yaxis_title='Drawdown (%)',
                        height=300,
                        margin=dict(l=0, r=0, t=40, b=0)
                    )
                    
                    st.plotly_chart(fig_dd, use_container_width=True)
            else:
                st.info("Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c ƒë√≥ng. Kh√¥ng c√≥ d·ªØ li·ªáu hi·ªáu su·∫•t ƒë·ªÉ hi·ªÉn th·ªã.")
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch. H√£y b·∫Øt ƒë·∫ßu giao d·ªãch ƒë·ªÉ xem hi·ªáu su·∫•t.")
        
        # Th√¥ng tin h·ªá th·ªëng
        st.markdown('<div class="sub-header">T√†i nguy√™n h·ªá th·ªëng</div>', unsafe_allow_html=True)
        col1, col2, col3 = st.columns(3)
        
        with col1:
            cpu_color = "#00b894" if system_status["resources"]["cpu_usage"] < 70 else "#fdcb6e" if system_status["resources"]["cpu_usage"] < 90 else "#ff7675"
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">CPU</div>
                    <div class="metric-value" style="color: {cpu_color};">{system_status["resources"]["cpu_usage"]}%</div>
                </div>""",
                unsafe_allow_html=True
            )
        
        with col2:
            memory_color = "#00b894" if system_status["resources"]["memory_usage"] < 70 else "#fdcb6e" if system_status["resources"]["memory_usage"] < 90 else "#ff7675"
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">B·ªô nh·ªõ</div>
                    <div class="metric-value" style="color: {memory_color};">{system_status["resources"]["memory_usage"]}%</div>
                </div>""",
                unsafe_allow_html=True
            )
        
        with col3:
            disk_color = "#00b894" if system_status["resources"]["disk_usage"] < 70 else "#fdcb6e" if system_status["resources"]["disk_usage"] < 90 else "#ff7675"
            st.markdown(
                f"""<div class="card">
                    <div class="metric-label">ƒêƒ©a</div>
                    <div class="metric-value" style="color: {disk_color};">{system_status["resources"]["disk_usage"]}%</div>
                </div>""",
                unsafe_allow_html=True
            )
    
    # Tab 2: Giao d·ªãch
    with tabs[1]:
        st.markdown('<div class="sub-header">L·ªãch s·ª≠ giao d·ªãch</div>', unsafe_allow_html=True)
        
        if not trading_data.empty:
            # Filter cho tab giao d·ªãch
            st.markdown("#### B·ªô l·ªçc")
            col1, col2 = st.columns(2)
            
            with col1:
                date_filter = st.date_input(
                    "Kho·∫£ng th·ªùi gian",
                    value=(
                        trading_data['timestamp'].min().date(),
                        datetime.now().date()
                    ),
                    key="date_filter"
                )
            
            with col2:
                action_filter = st.multiselect(
                    "Lo·∫°i giao d·ªãch",
                    options=["open", "close"],
                    default=["open", "close"],
                    format_func=lambda x: "M·ªü v·ªã th·∫ø" if x == "open" else "ƒê√≥ng v·ªã th·∫ø",
                    key="action_filter"
                )
            
            # L·ªçc d·ªØ li·ªáu
            filtered_data = trading_data.copy()
            
            if len(date_filter) == 2:
                start_date, end_date = date_filter
                end_date = end_date + timedelta(days=1)  # ƒê·ªÉ bao g·ªìm c·∫£ ng√†y cu·ªëi
                filtered_data = filtered_data[(filtered_data['timestamp'].dt.date >= start_date) & 
                                             (filtered_data['timestamp'].dt.date <= end_date)]
            
            if action_filter:
                filtered_data = filtered_data[filtered_data['action'].isin(action_filter)]
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu
            if not filtered_data.empty:
                # ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
                display_data = filtered_data.copy()
                display_data['timestamp'] = display_data['timestamp'].dt.strftime("%Y-%m-%d %H:%M:%S")
                display_data['action'] = display_data['action'].map({"open": "M·ªü v·ªã th·∫ø", "close": "ƒê√≥ng v·ªã th·∫ø"})
                
                # ƒê·ªãnh d·∫°ng c·ªôt
                renamed_columns = {
                    'timestamp': 'Th·ªùi gian',
                    'action': 'H√†nh ƒë·ªông',
                    'direction': 'H∆∞·ªõng',
                    'size': 'K√≠ch th∆∞·ªõc',
                    'price': 'Gi√°',
                    'leverage': 'ƒê√≤n b·∫©y',
                    'pnl': 'P&L',
                    'pnl_percent': 'P&L %'
                }
                
                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
                st.dataframe(
                    display_data.rename(columns=renamed_columns),
                    use_container_width=True,
                    height=400
                )
                
                # Th·ªëng k√™ giao d·ªãch
                st.markdown("#### Th·ªëng k√™ giao d·ªãch")
                
                # Ch·ªâ t√≠nh to√°n metrics cho c√°c giao d·ªãch ƒë√£ ƒë√≥ng
                closed_trades = filtered_data[filtered_data['action'] == 'close']
                
                if not closed_trades.empty:
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("T·ªïng s·ªë giao d·ªãch ƒë√£ ƒë√≥ng", len(closed_trades))
                    
                    with col2:
                        profitable_trades = len(closed_trades[closed_trades['pnl'] > 0])
                        win_rate = (profitable_trades / len(closed_trades)) * 100
                        st.metric("T·ª∑ l·ªá th·∫Øng", f"{win_rate:.2f}%")
                    
                    with col3:
                        avg_pnl = closed_trades['pnl'].mean()
                        st.metric("P&L trung b√¨nh", f"{avg_pnl:.2f}")
                    
                    with col4:
                        avg_pnl_percent = closed_trades['pnl_percent'].mean()
                        st.metric("P&L % trung b√¨nh", f"{avg_pnl_percent:.2f}%")
                    
                    # T√≠nh c√°c metrics b·ªï sung
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        max_profit = closed_trades['pnl'].max()
                        st.metric("L·ª£i nhu·∫≠n l·ªõn nh·∫•t", f"{max_profit:.2f}")
                    
                    with col2:
                        max_loss = closed_trades['pnl'].min()
                        st.metric("Thua l·ªó l·ªõn nh·∫•t", f"{max_loss:.2f}")
                    
                    with col3:
                        profit_sum = closed_trades[closed_trades['pnl'] > 0]['pnl'].sum()
                        st.metric("T·ªïng l·ª£i nhu·∫≠n", f"{profit_sum:.2f}")
                    
                    with col4:
                        loss_sum = closed_trades[closed_trades['pnl'] < 0]['pnl'].sum()
                        st.metric("T·ªïng thua l·ªó", f"{loss_sum:.2f}")
                    
                    # T√≠nh Profit Factor
                    if loss_sum != 0:
                        profit_factor = abs(profit_sum / loss_sum)
                    else:
                        profit_factor = float('inf')
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Profit Factor", f"{profit_factor:.2f}")
                    
                    with col2:
                        if len(closed_trades) > 0:
                            expected_return = (win_rate / 100 * closed_trades[closed_trades['pnl'] > 0]['pnl'].mean() + 
                                          (1 - win_rate / 100) * closed_trades[closed_trades['pnl'] < 0]['pnl'].mean())
                        else:
                            expected_return = 0
                        st.metric("K·ª≥ v·ªçng to√°n", f"{expected_return:.2f}")
                    
                    with col3:
                        net_profit = closed_trades['pnl'].sum()
                        st.metric("L·ª£i nhu·∫≠n r√≤ng", f"{net_profit:.2f}")
                    
                    with col4:
                        roi = (closed_trades['pnl_percent'].mean() * len(closed_trades))
                        st.metric("ROI t·ªïng", f"{roi:.2f}%")
                else:
                    st.info("Kh√¥ng c√≥ giao d·ªãch n√†o ƒë√£ ƒë√≥ng trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ hi·ªÉn th·ªã.")
    
    # Tab 3: Agent
    with tabs[2]:
        st.markdown('<div class="sub-header">Th√¥ng tin Agent</div>', unsafe_allow_html=True)
        
        if not agent_data.empty:
            # Hi·ªÉn th·ªã danh s√°ch agent
            st.markdown("#### Danh s√°ch Agent ƒë√£ hu·∫•n luy·ªán")
            
            # ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
            display_data = agent_data.copy()
            display_data['last_update'] = display_data['last_update'].dt.strftime("%Y-%m-%d %H:%M:%S")
            
            # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ hi·ªÉn th·ªã
            renamed_columns = {
                'name': 'T√™n Agent',
                'last_update': 'C·∫≠p nh·∫≠t l·∫ßn cu·ªëi',
                'episodes': 'S·ªë episode',
                'avg_reward': 'Ph·∫ßn th∆∞·ªüng TB',
                'win_rate': 'T·ª∑ l·ªá th·∫Øng (%)',
                'sharpe': 'T·ª∑ s·ªë Sharpe',
                'model_path': 'ƒê∆∞·ªùng d·∫´n m√¥ h√¨nh'
            }
            
            # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
            st.dataframe(
                display_data.rename(columns=renamed_columns),
                use_container_width=True,
                height=300
            )
            
            # Ch·ªçn agent ƒë·ªÉ xem chi ti·∫øt
            selected_agent = st.selectbox(
                "Ch·ªçn Agent ƒë·ªÉ xem chi ti·∫øt",
                options=agent_data['name'].tolist(),
                key="agent_select"
            )
            
            if selected_agent:
                # L·∫•y th√¥ng tin agent ƒë√£ ch·ªçn
                agent_info = agent_data[agent_data['name'] == selected_agent].iloc[0]
                
                st.markdown(f"#### Chi ti·∫øt Agent: {selected_agent}")
                
                # Hi·ªÉn th·ªã c√°c th√¥ng s·ªë chi ti·∫øt
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("S·ªë episode ƒë√£ hu·∫•n luy·ªán", agent_info['episodes'])
                
                with col2:
                    st.metric("Ph·∫ßn th∆∞·ªüng trung b√¨nh", f"{agent_info['avg_reward']:.4f}")
                
                with col3:
                    st.metric("T·ª∑ l·ªá th·∫Øng", f"{agent_info['win_rate']:.2f}%")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("T·ª∑ s·ªë Sharpe", f"{agent_info['sharpe']:.4f}")
                
                with col2:
                    st.metric("C·∫≠p nh·∫≠t l·∫ßn cu·ªëi", agent_info['last_update'])
                
                with col3:
                    st.text("ƒê∆∞·ªùng d·∫´n m√¥ h√¨nh")
                    st.code(agent_info['model_path'], language="text")
                
                # N√∫t tri·ªÉn khai agent
                col1, col2 = st.columns(2)
                
                with col1:
                    st.button(
                        "Tri·ªÉn khai Agent n√†y",
                        type="primary",
                        key="deploy_agent_button",
                        help="Tri·ªÉn khai agent n√†y ƒë·ªÉ giao d·ªãch th·ª±c"
                    )
                
                with col2:
                    st.button(
                        "Ti·∫øp t·ª•c hu·∫•n luy·ªán",
                        key="continue_training_button",
                        help="Ti·∫øp t·ª•c hu·∫•n luy·ªán agent n√†y"
                    )
                
                # Th√¥ng tin v·ªÅ qu√° tr√¨nh hu·∫•n luy·ªán
                st.markdown("#### Bi·ªÉu ƒë·ªì hu·∫•n luy·ªán")
                
                # Gi·∫£ l·∫≠p d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì hu·∫•n luy·ªán
                # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω t·∫£i d·ªØ li·ªáu hu·∫•n luy·ªán th·ª±c t·ª´ file log ho·∫∑c metrics
                episodes = list(range(1, agent_info['episodes'] + 1))
                reward_data = [agent_info['avg_reward'] * (1 + 0.2 * (i / agent_info['episodes']) + 0.05 * (0.5 - (i % 30) / 30)) for i in episodes]
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=episodes,
                    y=reward_data,
                    mode='lines',
                    name='Ph·∫ßn th∆∞·ªüng',
                    line=dict(color='#0078ff', width=2)
                ))
                
                fig.update_layout(
                    title='Ph·∫ßn th∆∞·ªüng theo episode',
                    xaxis_title='Episode',
                    yaxis_title='Ph·∫ßn th∆∞·ªüng',
                    height=400,
                    margin=dict(l=0, r=0, t=40, b=0)
                )
                
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu agent n√†o ƒë∆∞·ª£c t√¨m th·∫•y. H√£y hu·∫•n luy·ªán agent ƒë·ªÉ xem th√¥ng tin.")
    
    # Tab 4: H·ªá th·ªëng
    with tabs[3]:
        st.markdown('<div class="sub-header">Tr·∫°ng th√°i h·ªá th·ªëng</div>', unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã th√¥ng tin t√†i nguy√™n h·ªá th·ªëng
        col1, col2, col3 = st.columns(3)
        
        with col1:
            cpu_gauge = go.Figure(go.Indicator(
                mode="gauge+number",
                value=system_status["resources"]["cpu_usage"],
                title={"text": "CPU Usage"},
                domain={"x": [0, 1], "y": [0, 1]},
                gauge={
                    "axis": {"range": [0, 100]},
                    "bar": {"color": "#0078ff"},
                    "steps": [
                        {"range": [0, 50], "color": "#e8f5e9"},
                        {"range": [50, 80], "color": "#ffe0b2"},
                        {"range": [80, 100], "color": "#ffcdd2"}
                    ],
                    "threshold": {
                        "line": {"color": "red", "width": 4},
                        "thickness": 0.75,
                        "value": 90
                    }
                }
            ))
            
            cpu_gauge.update_layout(height=200, margin=dict(l=20, r=20, t=50, b=20))
            st.plotly_chart(cpu_gauge, use_container_width=True)
        
        with col2:
            memory_gauge = go.Figure(go.Indicator(
                mode="gauge+number",
                value=system_status["resources"]["memory_usage"],
                title={"text": "Memory Usage"},
                domain={"x": [0, 1], "y": [0, 1]},
                gauge={
                    "axis": {"range": [0, 100]},
                    "bar": {"color": "#0078ff"},
                    "steps": [
                        {"range": [0, 50], "color": "#e8f5e9"},
                        {"range": [50, 80], "color": "#ffe0b2"},
                        {"range": [80, 100], "color": "#ffcdd2"}
                    ],
                    "threshold": {
                        "line": {"color": "red", "width": 4},
                        "thickness": 0.75,
                        "value": 90
                    }
                }
            ))
            
            memory_gauge.update_layout(height=200, margin=dict(l=20, r=20, t=50, b=20))
            st.plotly_chart(memory_gauge, use_container_width=True)
        
        with col3:
            disk_gauge = go.Figure(go.Indicator(
                mode="gauge+number",
                value=system_status["resources"]["disk_usage"],
                title={"text": "Disk Usage"},
                domain={"x": [0, 1], "y": [0, 1]},
                gauge={
                    "axis": {"range": [0, 100]},
                    "bar": {"color": "#0078ff"},
                    "steps": [
                        {"range": [0, 50], "color": "#e8f5e9"},
                        {"range": [50, 80], "color": "#ffe0b2"},
                        {"range": [80, 100], "color": "#ffcdd2"}
                    ],
                    "threshold": {
                        "line": {"color": "red", "width": 4},
                        "thickness": 0.75,
                        "value": 90
                    }
                }
            ))
            
            disk_gauge.update_layout(height=200, margin=dict(l=20, r=20, t=50, b=20))
            st.plotly_chart(disk_gauge, use_container_width=True)
        
        # Tr·∫°ng th√°i c√°c th√†nh ph·∫ßn
        st.markdown("#### C√°c th√†nh ph·∫ßn h·ªá th·ªëng")
        
        for component_name, component in system_status["components"].items():
            status_icon = "üü¢" if component["status"] == "active" else "üî¥"
            st.markdown(
                f"""<div class="card">
                    <div style="display: flex; justify-content: space-between;">
                        <div>
                            <strong>{status_icon} {component_name}</strong><br>
                            <span class="small-font">{component["message"]}</span>
                        </div>
                        <div class="small-font">
                            Ki·ªÉm tra l√∫c: {component["last_check"]}
                        </div>
                    </div>
                </div>""",
                unsafe_allow_html=True
            )
        
        # C·∫•u h√¨nh h·ªá th·ªëng
        st.markdown("#### C·∫•u h√¨nh h·ªá th·ªëng")
        
        # Hi·ªÉn th·ªã tab cho c√°c nh√≥m c·∫•u h√¨nh
        config_tabs = st.tabs(["C·∫•u h√¨nh chung", "Giao d·ªãch", "Agent", "H·ªá th·ªëng"])
        
        with config_tabs[0]:
            # C·∫•u h√¨nh chung
            st.json({
                "version": system_config["version"],
                "build_date": system_config["build_date"],
                "environment": system_config["environment"],
                "debug_mode": system_config["debug_mode"]
            })
        
        with config_tabs[1]:
            # C·∫•u h√¨nh giao d·ªãch
            st.json(system_config["trading"])
        
        with config_tabs[2]:
            # C·∫•u h√¨nh agent
            st.json(system_config["agent"])
        
        with config_tabs[3]:
            # C·∫•u h√¨nh h·ªá th·ªëng chi ti·∫øt
            st.json({
                "max_threads": system_config["max_threads"],
                "max_processes": system_config["max_processes"],
                "request_timeout": system_config["request_timeout"],
                "max_retries": system_config["max_retries"],
                "memory_limit": system_config["memory_limit"],
                "data_storage_format": system_config["data_storage_format"]
            })
    
    # Tab 5: Logs
    with tabs[4]:
        st.markdown('<div class="sub-header">Logs h·ªá th·ªëng</div>', unsafe_allow_html=True)
        
        # Filter logs
        col1, col2 = st.columns(2)
        
        with col1:
            log_type = st.selectbox(
                "Lo·∫°i log",
                options=["main", "trading", "training", "api", "system", "error"],
                format_func=lambda x: {
                    "main": "Log ch√≠nh",
                    "trading": "Giao d·ªãch",
                    "training": "Hu·∫•n luy·ªán",
                    "api": "API",
                    "system": "H·ªá th·ªëng",
                    "error": "L·ªói"
                }[x],
                key="log_type_select"
            )
        
        with col2:
            log_level = st.selectbox(
                "M·ª©c ƒë·ªô log",
                options=["ALL", "INFO", "WARNING", "ERROR", "CRITICAL"],
                key="log_level_select"
            )
        
        # T·∫£i log
        log_entries = load_recent_logs(200)
        
        # L·ªçc log theo lo·∫°i v√† m·ª©c ƒë·ªô
        filtered_logs = []
        
        for log in log_entries:
            # Ki·ªÉm tra lo·∫°i log
            if log_type == "main" or f"[{log_type.upper()}]" in log:
                # Ki·ªÉm tra m·ª©c ƒë·ªô log
                if log_level == "ALL" or f"[{log_level}]" in log:
                    filtered_logs.append(log)
        
        # Hi·ªÉn th·ªã log
        st.text_area(
            "Log entries",
            value="".join(filtered_logs),
            height=500,
            key="log_text_area"
        )
        
        # N√∫t l√†m m·ªõi log
        col1, col2 = st.columns([1, 4])
        with col1:
            st.button(
                "L√†m m·ªõi",
                key="refresh_logs_button"
            )

# Render sidebar
def render_sidebar():
    """Hi·ªÉn th·ªã sidebar."""
    st.sidebar.markdown("## Automated Trading System")
    
    # Th√¥ng tin phi√™n b·∫£n h·ªá th·ªëng
    system_config = load_system_config()
    st.sidebar.markdown(f"**Phi√™n b·∫£n:** {system_config['version']}")
    st.sidebar.markdown(f"**M√¥i tr∆∞·ªùng:** {system_config['environment']}")
    
    # Th√™m c√°c ph·∫ßn kh√°c cho sidebar
    st.sidebar.markdown("---")
    
    # Menu ƒëi·ªÅu h∆∞·ªõng
    st.sidebar.markdown("### ƒêi·ªÅu h∆∞·ªõng")
    page = st.sidebar.radio(
        "ƒêi t·ªõi:",
        options=["Dashboard", "Qu·∫£n l√Ω Agent", "Qu·∫£n l√Ω Giao d·ªãch", "C√†i ƒë·∫∑t H·ªá th·ªëng", "Gi√°m s√°t"],
        format_func=lambda x: {
            "Dashboard": "üìä Dashboard",
            "Qu·∫£n l√Ω Agent": "ü§ñ Qu·∫£n l√Ω Agent",
            "Qu·∫£n l√Ω Giao d·ªãch": "üìà Qu·∫£n l√Ω Giao d·ªãch",
            "C√†i ƒë·∫∑t H·ªá th·ªëng": "‚öôÔ∏è C√†i ƒë·∫∑t H·ªá th·ªëng",
            "Gi√°m s√°t": "üëÅÔ∏è Gi√°m s√°t"
        }[x],
    )
    
    # Hi·ªÉn th·ªã trang t∆∞∆°ng ·ª©ng (hi·ªán t·∫°i ch·ªâ c√≥ Dashboard)
    if page != "Dashboard":
        st.sidebar.info(f"Trang {page} ƒëang trong qu√° tr√¨nh ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau.")
    
    # Ph·∫ßn ƒëi·ªÅu khi·ªÉn nhanh
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ƒêi·ªÅu khi·ªÉn nhanh")
    
    # N√∫t kh·ªüi ƒë·ªông/d·ª´ng h·ªá th·ªëng
    system_running = st.sidebar.checkbox("H·ªá th·ªëng ƒëang ch·∫°y", value=True, key="system_running")
    
    if system_running:
        if st.sidebar.button("D·ª´ng h·ªá th·ªëng", key="stop_system"):
            # Logic d·ª´ng h·ªá th·ªëng
            st.sidebar.warning("ƒêang d·ª´ng h·ªá th·ªëng...")
            time.sleep(1)
            st.sidebar.success("H·ªá th·ªëng ƒë√£ d·ª´ng th√†nh c√¥ng!")
            st.sidebar.checkbox("H·ªá th·ªëng ƒëang ch·∫°y", value=False, key="system_running_updated")
    else:
        if st.sidebar.button("Kh·ªüi ƒë·ªông h·ªá th·ªëng", key="start_system"):
            # Logic kh·ªüi ƒë·ªông h·ªá th·ªëng
            st.sidebar.info("ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng...")
            time.sleep(1)
            st.sidebar.success("H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!")
            st.sidebar.checkbox("H·ªá th·ªëng ƒëang ch·∫°y", value=True, key="system_running_updated")
    
    # N√∫t thi·∫øt l·∫≠p l·∫°i c·∫•u h√¨nh
    if st.sidebar.button("T·∫£i l·∫°i c·∫•u h√¨nh", key="reload_config"):
        st.sidebar.info("ƒêang t·∫£i l·∫°i c·∫•u h√¨nh...")
        time.sleep(1)
        st.sidebar.success("C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i th√†nh c√¥ng!")
    
    # Th√¥ng tin ph·∫ßn d∆∞·ªõi
    st.sidebar.markdown("---")
    st.sidebar.markdown("### H·ªó tr·ª£")
    st.sidebar.markdown("üìß Email: support@example.com")
    st.sidebar.markdown("üîó Documentation: [Link](https://docs.example.com)")
    
    # Th√¥ng tin cu·ªëi trang
    st.sidebar.markdown("---")
    st.sidebar.markdown("Automated Trading System ¬© 2024")
    st.sidebar.markdown("*Version 0.1.0*")

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng Streamlit."""
    # T·∫£i CSS
    load_css()
    
    # Render sidebar
    render_sidebar()
    
    # Render dashboard ch√≠nh
    render_main_dashboard()

if __name__ == "__main__":
    main()