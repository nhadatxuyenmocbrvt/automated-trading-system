"""
Dashboard trang gi√°m s√°t h·ªá th·ªëng.
File n√†y cung c·∫•p giao di·ªán ng∆∞·ªùi d√πng ƒë·ªÉ gi√°m s√°t t√¨nh tr·∫°ng,
hi·ªáu su·∫•t, v√† s·ª©c kh·ªèe c·ªßa h·ªá th·ªëng giao d·ªãch t·ª± ƒë·ªông.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import datetime
from datetime import timedelta
import psutil
import socket
import platform
from typing import Dict, List, Any, Optional, Tuple, Union

# Import c√°c module t·ª´ h·ªá th·ªëng
from logs.metrics.system_metrics import get_system_metrics, SystemMetricsCollector
from logs.logger import get_system_logger
from config.constants import SystemStatus, OrderStatus, Exchange, Timeframe
from config.env import get_env
from streamlit_dashboard.components.sidebar import render_sidebar

# Kh·ªüi t·∫°o logger
logger = get_system_logger("dashboard_system_monitor")

# Ti√™u ƒë·ªÅ trang
st.set_page_config(
    page_title="ATS - Gi√°m s√°t h·ªá th·ªëng",
    page_icon="üìä",
    layout="wide"
)

def create_system_overview():
    """T·∫°o ph·∫ßn t·ªïng quan h·ªá th·ªëng."""
    
    st.header("T·ªïng quan h·ªá th·ªëng")
    
    # L·∫•y s·ªë li·ªáu t·ª´ b·ªô thu th·∫≠p
    metrics_collector = get_system_metrics()
    system_summary = metrics_collector.get_system_summary()
    
    # T·∫°o c√°c card th√¥ng tin
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="CPU Usage",
            value=f"{system_summary['cpu']['usage']:.1f}%",
            delta=f"{system_summary['cpu']['usage'] - system_summary['cpu']['average']:.1f}%"
        )
    
    with col2:
        st.metric(
            label="Memory Usage",
            value=f"{system_summary['memory']['usage']:.1f}%",
            delta=f"{system_summary['memory']['usage'] - system_summary['memory']['average']:.1f}%"
        )
    
    with col3:
        st.metric(
            label="Disk Usage",
            value=f"{system_summary['disk']['usage']:.1f}%",
            delta=None
        )
    
    with col4:
        st.metric(
            label="Network Latency",
            value=f"{system_summary['network']['latency']:.1f}ms",
            delta=f"{system_summary['network']['latency'] - system_summary['network']['average']:.1f}ms",
            delta_color="inverse"
        )
    
    st.divider()
    
    return system_summary

def create_system_health_cards(system_summary: Dict[str, Any]):
    """
    T·∫°o c√°c th·∫ª tr·∫°ng th√°i s·ª©c kh·ªèe h·ªá th·ªëng.
    
    Args:
        system_summary: T√≥m t·∫Øt th√¥ng tin h·ªá th·ªëng
    """
    st.subheader("S·ª©c kh·ªèe h·ªá th·ªëng")
    
    # ƒê·ªãnh nghƒ©a ng∆∞·ª°ng c·∫£nh b√°o
    thresholds = {
        "cpu": {"warning": 70, "critical": 90},
        "memory": {"warning": 80, "critical": 90},
        "disk": {"warning": 80, "critical": 90},
        "network": {"warning": 100, "critical": 200}  # ms
    }
    
    # T·∫°o c√°c th·∫ª tr·∫°ng th√°i
    cols = st.columns(4)
    
    # CPU Health
    cpu_usage = system_summary['cpu']['usage']
    cpu_status = "T·ªët"
    cpu_color = "green"
    
    if cpu_usage >= thresholds["cpu"]["critical"]:
        cpu_status = "Nghi√™m tr·ªçng"
        cpu_color = "red"
    elif cpu_usage >= thresholds["cpu"]["warning"]:
        cpu_status = "C·∫£nh b√°o"
        cpu_color = "orange"
    
    cols[0].markdown(
        f"""
        <div style="padding:10px;border-radius:5px;border:1px solid {cpu_color};">
            <h3 style="color:{cpu_color};margin:0;">CPU Status: {cpu_status}</h3>
            <p>Hi·ªán t·∫°i: {cpu_usage:.1f}%</p>
            <p>Trung b√¨nh: {system_summary['cpu']['average']:.1f}%</p>
            <p>Per Core: {', '.join([f"{x:.0f}%" for x in system_summary['cpu']['per_core'][:4]])}{'...' if len(system_summary['cpu']['per_core']) > 4 else ''}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # Memory Health
    mem_usage = system_summary['memory']['usage']
    mem_status = "T·ªët"
    mem_color = "green"
    
    if mem_usage >= thresholds["memory"]["critical"]:
        mem_status = "Nghi√™m tr·ªçng"
        mem_color = "red"
    elif mem_usage >= thresholds["memory"]["warning"]:
        mem_status = "C·∫£nh b√°o"
        mem_color = "orange"
    
    mem_details = system_summary['memory']['details']
    cols[1].markdown(
        f"""
        <div style="padding:10px;border-radius:5px;border:1px solid {mem_color};">
            <h3 style="color:{mem_color};margin:0;">Memory Status: {mem_status}</h3>
            <p>Hi·ªán t·∫°i: {mem_usage:.1f}%</p>
            <p>T·ªïng: {mem_details['total']:.1f} GB</p>
            <p>Kh·∫£ d·ª•ng: {mem_details['available']:.1f} GB</p>
            <p>ƒê√£ d√πng: {mem_details['used']:.1f} GB</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # Disk Health
    disk_usage = system_summary['disk']['usage']
    disk_status = "T·ªët"
    disk_color = "green"
    
    if disk_usage >= thresholds["disk"]["critical"]:
        disk_status = "Nghi√™m tr·ªçng"
        disk_color = "red"
    elif disk_usage >= thresholds["disk"]["warning"]:
        disk_status = "C·∫£nh b√°o"
        disk_color = "orange"
    
    disk_details = system_summary['disk']['details']
    cols[2].markdown(
        f"""
        <div style="padding:10px;border-radius:5px;border:1px solid {disk_color};">
            <h3 style="color:{disk_color};margin:0;">Disk Status: {disk_status}</h3>
            <p>Hi·ªán t·∫°i: {disk_usage:.1f}%</p>
            <p>T·ªïng: {disk_details['total']:.1f} GB</p>
            <p>Kh·∫£ d·ª•ng: {disk_details['free']:.1f} GB</p>
            <p>ƒê√£ d√πng: {disk_details['used']:.1f} GB</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # Network Health
    net_latency = system_summary['network']['latency']
    net_status = "T·ªët"
    net_color = "green"
    
    if net_latency >= thresholds["network"]["critical"]:
        net_status = "Nghi√™m tr·ªçng"
        net_color = "red"
    elif net_latency >= thresholds["network"]["warning"]:
        net_status = "C·∫£nh b√°o"
        net_color = "orange"
    
    net_stats = system_summary['network']['stats']
    cols[3].markdown(
        f"""
        <div style="padding:10px;border-radius:5px;border:1px solid {net_color};">
            <h3 style="color:{net_color};margin:0;">Network Status: {net_status}</h3>
            <p>ƒê·ªô tr·ªÖ: {net_latency:.1f} ms</p>
            <p>BƒÉng th√¥ng g·ª≠i: {net_stats['bandwidth']['sent']:.2f} MB/s</p>
            <p>BƒÉng th√¥ng nh·∫≠n: {net_stats['bandwidth']['received']:.2f} MB/s</p>
            <p>K·∫øt n·ªëi: {net_stats['connections']}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    st.divider()

def create_system_info_section(system_summary: Dict[str, Any]):
    """
    T·∫°o ph·∫ßn th√¥ng tin h·ªá th·ªëng.
    
    Args:
        system_summary: T√≥m t·∫Øt th√¥ng tin h·ªá th·ªëng
    """
    st.subheader("Th√¥ng tin h·ªá th·ªëng")
    
    system_info = system_summary['system']
    
    # T·∫°o layout 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Th√¥ng tin c∆° b·∫£n")
        info_table = {
            "Hostname": system_info["hostname"],
            "Platform": system_info["platform"],
            "Python Version": system_info["python_version"],
            "CPU Cores": system_info["cpu_count"],
            "Uptime": f"{system_info['uptime'] / 3600:.1f} gi·ªù",
            "Th·ªùi gian h·ªá th·ªëng": system_info["timestamp"]
        }
        
        st.table(pd.DataFrame(list(info_table.items()), columns=["Thu·ªôc t√≠nh", "Gi√° tr·ªã"]))
    
    with col2:
        st.markdown("#### Th√¥ng tin m√¥i tr∆∞·ªùng")
        
        # L·∫•y m·ªôt s·ªë th√¥ng tin t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        env_info = {
            "M√¥i tr∆∞·ªùng": get_env("TRADING_ENV", "development").upper(),
            "Tr·∫°ng th√°i": get_env("SYSTEM_STATUS", "unknown").upper(),
            "S·ªë v·ªã th·∫ø t·ªëi ƒëa": get_env("MAX_OPEN_POSITIONS", "5"),
            "ƒê√≤n b·∫©y m·∫∑c ƒë·ªãnh": get_env("DEFAULT_LEVERAGE", "1.0"),
            "R·ªßi ro m·ªói giao d·ªãch": f"{float(get_env('RISK_PER_TRADE', '0.02')) * 100:.1f}%",
            "B·ªô nh·ªõ ƒë·ªám logs": get_env("LOG_BUFFER_SIZE", "1000"),
            "T·∫ßn su·∫•t backup": get_env("BACKUP_FREQUENCY", "1 ng√†y")
        }
        
        st.table(pd.DataFrame(list(env_info.items()), columns=["Bi·∫øn", "Gi√° tr·ªã"]))
    
    st.divider()

def create_resource_usage_charts(system_summary: Dict[str, Any]):
    """
    T·∫°o bi·ªÉu ƒë·ªì s·ª≠ d·ª•ng t√†i nguy√™n.
    
    Args:
        system_summary: T√≥m t·∫Øt th√¥ng tin h·ªá th·ªëng
    """
    st.subheader("S·ª≠ d·ª•ng t√†i nguy√™n theo th·ªùi gian")
    
    # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p cho bi·ªÉu ƒë·ªì
    # Trong th·ª±c t·∫ø, d·ªØ li·ªáu n√†y s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
    chart_times = [datetime.datetime.now() - timedelta(minutes=i) for i in range(30, 0, -1)]
    
    # CPU Usage
    cpu_data = []
    for _ in range(30):
        base_value = system_summary['cpu']['usage']
        variation = np.random.normal(0, 5)  # Random variation
        cpu_value = max(0, min(100, base_value + variation))  # Keep between 0-100
        cpu_data.append(cpu_value)
    
    # Memory Usage
    memory_data = []
    for _ in range(30):
        base_value = system_summary['memory']['usage']
        variation = np.random.normal(0, 3)  # Less variation for memory
        memory_value = max(0, min(100, base_value + variation))  # Keep between 0-100
        memory_data.append(memory_value)
    
    # Network Latency
    latency_data = []
    for _ in range(30):
        base_value = system_summary['network']['latency']
        variation = np.random.normal(0, 10)  # More variation for latency
        latency_value = max(0, base_value + variation)  # Keep positive
        latency_data.append(latency_value)
    
    # Create DataFrame
    df = pd.DataFrame({
        'time': chart_times,
        'CPU (%)': cpu_data,
        'Memory (%)': memory_data,
        'Network (ms)': latency_data
    })
    
    # S·ª≠ d·ª•ng tabs ƒë·ªÉ hi·ªÉn th·ªã c√°c bi·ªÉu ƒë·ªì
    tab1, tab2, tab3 = st.tabs(["CPU & Memory", "Network", "Combined"])
    
    with tab1:
        fig = px.line(df, x="time", y=["CPU (%)", "Memory (%)"],
                     title="CPU & Memory Usage Over Time",
                     labels={"value": "Usage (%)", "time": "Time"},
                     line_shape="spline")
        
        # Th√™m v√πng c·∫£nh b√°o
        fig.add_shape(
            type="rect",
            x0=df["time"].min(),
            x1=df["time"].max(),
            y0=70,
            y1=100,
            fillcolor="rgba(255,0,0,0.1)",
            line=dict(width=0),
            layer="below"
        )
        
        fig.update_layout(
            height=400,
            legend_title_text="Metric",
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        fig = px.line(df, x="time", y="Network (ms)",
                     title="Network Latency Over Time",
                     labels={"Network (ms)": "Latency (ms)", "time": "Time"},
                     line_shape="spline")
        
        # Th√™m v√πng c·∫£nh b√°o
        fig.add_shape(
            type="rect",
            x0=df["time"].min(),
            x1=df["time"].max(),
            y0=100,
            y1=df["Network (ms)"].max() * 1.2,
            fillcolor="rgba(255,0,0,0.1)",
            line=dict(width=0),
            layer="below"
        )
        
        fig.update_layout(
            height=400,
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        # Combined chart
        fig = make_subplots(specs=[[{"secondary_y": True}]])
        
        # Add CPU and Memory lines
        fig.add_trace(
            go.Scatter(x=df["time"], y=df["CPU (%)"], name="CPU (%)"),
            secondary_y=False
        )
        
        fig.add_trace(
            go.Scatter(x=df["time"], y=df["Memory (%)"], name="Memory (%)"),
            secondary_y=False
        )
        
        # Add Network line on secondary y-axis
        fig.add_trace(
            go.Scatter(x=df["time"], y=df["Network (ms)"], name="Network (ms)"),
            secondary_y=True
        )
        
        # Set titles
        fig.update_layout(
            title_text="System Resources Over Time",
            height=400,
            hovermode="x unified"
        )
        
        # Set y-axes titles
        fig.update_yaxes(title_text="Usage (%)", secondary_y=False)
        fig.update_yaxes(title_text="Latency (ms)", secondary_y=True)
        
        st.plotly_chart(fig, use_container_width=True)
    
    st.divider()

def create_exchange_api_health(system_summary: Dict[str, Any]):
    """
    T·∫°o ph·∫ßn s·ª©c kh·ªèe API s√†n giao d·ªãch.
    
    Args:
        system_summary: T√≥m t·∫Øt th√¥ng tin h·ªá th·ªëng
    """
    st.subheader("S·ª©c kh·ªèe API s√†n giao d·ªãch")
    
    # D·ªØ li·ªáu s√†n giao d·ªãch t·ª´ system_summary
    exchange_data = system_summary.get("exchange", {})
    
    if not exchange_data:
        # T·∫°o d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
        exchange_data = {
            "binance": {
                "api_name": "binance",
                "total_requests": 1250,
                "success_count": 1180,
                "error_count": 70,
                "success_rate": 94.4,
                "avg_latency": 87.5,
                "rate_limit_hits": 5,
                "authentication_errors": 0,
                "timeout_errors": 8
            },
            "bybit": {
                "api_name": "bybit",
                "total_requests": 825,
                "success_count": 798,
                "error_count": 27,
                "success_rate": 96.7,
                "avg_latency": 120.3,
                "rate_limit_hits": 2,
                "authentication_errors": 1,
                "timeout_errors": 3
            }
        }
    
    # Hi·ªÉn th·ªã b·∫£ng th√¥ng tin
    exchange_info = []
    for name, data in exchange_data.items():
        # X√°c ƒë·ªãnh tr·∫°ng th√°i
        status = "T·ªët"
        status_color = "green"
        
        if data.get("success_rate", 100) < 90:
            status = "S·ª± c·ªë"
            status_color = "red"
        elif data.get("success_rate", 100) < 95:
            status = "C·∫£nh b√°o"
            status_color = "orange"
        
        exchange_info.append({
            "S√†n": name.capitalize(),
            "T·ªïng y√™u c·∫ßu": data.get("total_requests", 0),
            "T·ª∑ l·ªá th√†nh c√¥ng": f"{data.get('success_rate', 100):.1f}%",
            "ƒê·ªô tr·ªÖ TB": f"{data.get('avg_latency', 0):.1f} ms",
            "Rate Limit": data.get("rate_limit_hits", 0),
            "Timeout": data.get("timeout_errors", 0),
            "Tr·∫°ng th√°i": f"<span style='color:{status_color}'>{status}</span>"
        })
    
    # T·∫°o DataFrame v√† hi·ªÉn th·ªã
    if exchange_info:
        df = pd.DataFrame(exchange_info)
        st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì cho m·ªói s√†n
        for name, data in exchange_data.items():
            with st.expander(f"Chi ti·∫øt s√†n {name.capitalize()}"):
                # T·∫°o 2 c·ªôt
                col1, col2 = st.columns(2)
                
                with col1:
                    # Bi·ªÉu ƒë·ªì t·ª∑ l·ªá th√†nh c√¥ng/l·ªói
                    fig = go.Figure(data=[
                        go.Pie(
                            labels=["Th√†nh c√¥ng", "L·ªói"],
                            values=[data.get("success_count", 0), data.get("error_count", 0)],
                            hole=.4,
                            marker_colors=["#28a745", "#dc3545"]
                        )
                    ])
                    
                    fig.update_layout(
                        title_text=f"T·ª∑ l·ªá y√™u c·∫ßu {name.capitalize()}",
                        height=300
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # Bi·ªÉu ƒë·ªì ph√¢n lo·∫°i l·ªói
                    error_types = {
                        "Rate Limit": data.get("rate_limit_hits", 0),
                        "Authentication": data.get("authentication_errors", 0),
                        "Timeout": data.get("timeout_errors", 0),
                        "Kh√°c": data.get("error_count", 0) - 
                                data.get("rate_limit_hits", 0) - 
                                data.get("authentication_errors", 0) - 
                                data.get("timeout_errors", 0)
                    }
                    
                    # Lo·∫°i b·ªè c√°c lo·∫°i l·ªói c√≥ gi√° tr·ªã 0
                    error_types = {k: v for k, v in error_types.items() if v > 0}
                    
                    if error_types:
                        fig = go.Figure(data=[
                            go.Bar(
                                x=list(error_types.keys()),
                                y=list(error_types.values()),
                                marker_color="#dc3545"
                            )
                        ])
                        
                        fig.update_layout(
                            title_text=f"Ph√¢n lo·∫°i l·ªói {name.capitalize()}",
                            height=300,
                            yaxis_title="S·ªë l∆∞·ª£ng"
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.info("Kh√¥ng c√≥ th√¥ng tin l·ªói chi ti·∫øt.")
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu API s√†n giao d·ªãch.")
    
    st.divider()

def create_log_activity_section():
    """T·∫°o ph·∫ßn ho·∫°t ƒë·ªông logs."""
    st.subheader("Ho·∫°t ƒë·ªông Logs G·∫ßn ƒê√¢y")
    
    # Trong th·ª±c t·∫ø, logs s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ h·ªá th·ªëng log
    # ƒê√¢y l√† v√≠ d·ª• d·ªØ li·ªáu gi·∫£ l·∫≠p
    sample_logs = [
        {"timestamp": datetime.datetime.now() - timedelta(minutes=5), 
         "level": "INFO", 
         "component": "system_monitor", 
         "message": "H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"},
        {"timestamp": datetime.datetime.now() - timedelta(minutes=15), 
         "level": "WARNING", 
         "component": "exchange_api", 
         "message": "ƒê·ªô tr·ªÖ API tƒÉng tr√™n s√†n Binance"},
        {"timestamp": datetime.datetime.now() - timedelta(minutes=45), 
         "level": "ERROR", 
         "component": "order_execution", 
         "message": "L·ªói th·ª±c thi l·ªánh tr√™n c·∫∑p BTC/USDT"},
        {"timestamp": datetime.datetime.now() - timedelta(hours=2), 
         "level": "INFO", 
         "component": "model_training", 
         "message": "Ho√†n th√†nh hu·∫•n luy·ªán m√¥ h√¨nh DQN m·ªõi"},
        {"timestamp": datetime.datetime.now() - timedelta(hours=4), 
         "level": "WARNING", 
         "component": "risk_management", 
         "message": "ƒê·∫°t ng∆∞·ª°ng r·ªßi ro 80% cho c·∫∑p ETH/USDT"},
        {"timestamp": datetime.datetime.now() - timedelta(hours=6), 
         "level": "INFO", 
         "component": "system_startup", 
         "message": "H·ªá th·ªëng kh·ªüi ƒë·ªông th√†nh c√¥ng v·ªõi 10 c·∫∑p giao d·ªãch"}
    ]
    
    # T·∫°o DataFrame
    logs_df = pd.DataFrame(sample_logs)
    
    # Format th·ªùi gian
    logs_df["timestamp"] = logs_df["timestamp"].dt.strftime("%Y-%m-%d %H:%M:%S")
    
    # ƒê·ªãnh nghƒ©a m√†u cho c·∫•p ƒë·ªô log
    def log_color(level):
        colors = {
            "INFO": "green",
            "WARNING": "orange",
            "ERROR": "red",
            "CRITICAL": "darkred"
        }
        return f"<span style='color:{colors.get(level, 'black')}'>{level}</span>"
    
    # √Åp d·ª•ng m√†u
    logs_df["level"] = logs_df["level"].apply(log_color)
    
    # Hi·ªÉn th·ªã b·∫£ng logs
    st.markdown(logs_df.to_html(escape=False, index=False), unsafe_allow_html=True)
    
    # N√∫t ƒë·ªÉ xem th√™m logs
    if st.button("Xem th√™m logs"):
        st.info("Ch·ª©c nƒÉng xem logs chi ti·∫øt s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.")
    
    st.divider()

def create_active_trades_section():
    """T·∫°o ph·∫ßn giao d·ªãch ƒëang ho·∫°t ƒë·ªông."""
    st.subheader("Giao d·ªãch ƒëang ho·∫°t ƒë·ªông")
    
    # Trong th·ª±c t·∫ø, th√¥ng tin giao d·ªãch s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ h·ªá th·ªëng qu·∫£n l√Ω giao d·ªãch
    # ƒê√¢y l√† v√≠ d·ª• d·ªØ li·ªáu gi·∫£ l·∫≠p
    sample_trades = [
        {"symbol": "BTC/USDT", "type": "LONG", "entry_price": 57850.25, "current_price": 58100.50, "profit_loss": 0.43, "time": "2h 15m"},
        {"symbol": "ETH/USDT", "type": "SHORT", "entry_price": 3245.75, "current_price": 3210.25, "profit_loss": 1.09, "time": "45m"},
        {"symbol": "SOL/USDT", "type": "LONG", "entry_price": 142.30, "current_price": 140.85, "profit_loss": -1.02, "time": "3h 30m"},
        {"symbol": "XRP/USDT", "type": "LONG", "entry_price": 0.5725, "current_price": 0.5812, "profit_loss": 1.52, "time": "1h 10m"}
    ]
    
    # T·∫°o DataFrame
    trades_df = pd.DataFrame(sample_trades)
    
    # ƒê·ªãnh d·∫°ng P&L v·ªõi m√†u s·∫Øc
    def format_pnl(pnl):
        color = "green" if pnl >= 0 else "red"
        return f"<span style='color:{color}'>{pnl:+.2f}%</span>"
    
    trades_df["profit_loss"] = trades_df["profit_loss"].apply(format_pnl)
    
    # ƒê·ªãnh d·∫°ng lo·∫°i giao d·ªãch
    def format_type(type_str):
        color = "green" if type_str == "LONG" else "red"
        return f"<span style='color:{color}'>{type_str}</span>"
    
    trades_df["type"] = trades_df["type"].apply(format_type)
    
    # Hi·ªÉn th·ªã b·∫£ng giao d·ªãch
    st.markdown(trades_df.to_html(escape=False, index=False), unsafe_allow_html=True)
    
    # Li√™n k·∫øt t·ªõi trang giao d·ªãch chi ti·∫øt
    st.markdown("[Xem t·∫•t c·∫£ giao d·ªãch ƒëang ho·∫°t ƒë·ªông ‚Üí](#)")
    
    st.divider()

def create_system_actions():
    """T·∫°o ph·∫ßn h√†nh ƒë·ªông h·ªá th·ªëng."""
    st.subheader("H√†nh ƒë·ªông h·ªá th·ªëng")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("L√†m m·ªõi d·ªØ li·ªáu", type="primary"):
            st.rerun()
    
    with col2:
        if st.button("Ki·ªÉm tra s·ª©c kh·ªèe", help="Ch·∫°y ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng to√†n di·ªán"):
            st.info("ƒêang ch·∫°y ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng...")
            with st.spinner("ƒêang ki·ªÉm tra..."):
                # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
                time.sleep(2)
            st.success("Ki·ªÉm tra s·ª©c kh·ªèe ho√†n t·∫•t. Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ.")
    
    with col3:
        if st.button("X√≥a b·ªô nh·ªõ ƒë·ªám", help="X√≥a b·ªô nh·ªõ ƒë·ªám h·ªá th·ªëng"):
            st.info("ƒêang x√≥a b·ªô nh·ªõ ƒë·ªám h·ªá th·ªëng...")
            with st.spinner("ƒêang x√≥a..."):
                # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
                time.sleep(1)
            st.success("ƒê√£ x√≥a b·ªô nh·ªõ ƒë·ªám th√†nh c√¥ng.")

def main():
    """H√†m ch√≠nh c·ªßa trang gi√°m s√°t h·ªá th·ªëng."""
    
    # Render sidebar
    sidebar, selected_page = render_sidebar("system_monitor")
    
    # Set ti√™u ƒë·ªÅ trang
    st.title("Gi√°m s√°t h·ªá th·ªëng")
    
    # Hi·ªÉn th·ªã th·ªùi gian hi·ªán t·∫°i
    st.markdown(f"**C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # T·∫°o c√°c ph·∫ßn n·ªôi dung
    system_summary = create_system_overview()
    create_system_health_cards(system_summary)
    
    # Chia th√†nh 2 tab ch√≠nh
    tab1, tab2 = st.tabs(["T√†i nguy√™n h·ªá th·ªëng", "Giao d·ªãch & Logs"])
    
    with tab1:
        create_system_info_section(system_summary)
        create_resource_usage_charts(system_summary)
        create_exchange_api_health(system_summary)
    
    with tab2:
        create_active_trades_section()
        create_log_activity_section()
    
    # Ph·∫ßn h√†nh ƒë·ªông h·ªá th·ªëng
    create_system_actions()

if __name__ == "__main__":
    main()